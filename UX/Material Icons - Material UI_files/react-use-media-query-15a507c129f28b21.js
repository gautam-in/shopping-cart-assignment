(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2354],{799120:function(n,a){"use strict";a.match=function(n,a){return c(n).some((function(n){var s=n.inverse,e="all"===n.type||a.type===n.type;if(e&&s||!e&&!s)return!1;var t=n.expressions.every((function(n){var s=n.feature,e=n.modifier,t=n.value,p=a[s];if(!p)return!1;switch(s){case"orientation":case"scan":return p.toLowerCase()===t.toLowerCase();case"width":case"height":case"device-width":case"device-height":t=u(t),p=u(p);break;case"resolution":t=r(t),p=r(p);break;case"aspect-ratio":case"device-aspect-ratio":case"device-pixel-ratio":t=i(t),p=i(p);break;case"grid":case"color":case"color-index":case"monochrome":t=parseInt(t,10)||1,p=parseInt(p,10)||0}switch(e){case"min":return p>=t;case"max":return p<=t;default:return p===t}}));return t&&!s||!t&&s}))},a.parse=c;var s=/(?:(only|not)?\s*([^\s\(\)]+)(?:\s*and)?\s*)?(.+)?/i,e=/\(\s*([^\s\:\)]+)\s*(?:\:\s*([^\s\)]+))?\s*\)/,t=/^(?:(min|max)-)?(.+)/,p=/(em|rem|px|cm|mm|in|pt|pc)?$/,o=/(dpi|dpcm|dppx)?$/;function c(n){return n.split(",").map((function(n){var a=(n=n.trim()).match(s),p=a[1],o=a[2],c=a[3]||"",i={};return i.inverse=!!p&&"not"===p.toLowerCase(),i.type=o?o.toLowerCase():"all",c=c.match(/\([^\)]+\)/g)||[],i.expressions=c.map((function(n){var a=n.match(e),s=a[1].toLowerCase().match(t);return{modifier:s[1],feature:s[2],value:a[2]}})),i}))}function i(n){var a,s=Number(n);return s||(s=(a=n.match(/^(\d+)\s*\/\s*(\d+)$/))[1]/a[2]),s}function r(n){var a=parseFloat(n);switch(String(n).match(o)[1]){case"dpcm":return a/2.54;case"dppx":return 96*a;default:return a}}function u(n){var a=parseFloat(n);switch(String(n).match(p)[1]){case"em":case"rem":return 16*a;case"cm":return 96*a/2.54;case"mm":return 96*a/2.54/10;case"in":return 96*a;case"pt":return 72*a;case"pc":return 72*a/12;default:return a}}},999857:function(n,a,s){var e=s(231533),t=function(n){var a="",s=Object.keys(n);return s.forEach((function(t,p){var o=n[t];(function(n){return/[height|width]$/.test(n)})(t=e(t))&&"number"===typeof o&&(o+="px"),a+=!0===o?t:!1===o?"not "+t:"("+t+": "+o+")",p<s.length-1&&(a+=" and ")})),a};n.exports=function(n){var a="";return"string"===typeof n?n:n instanceof Array?(n.forEach((function(s,e){a+=t(s),e<n.length-1&&(a+=", ")})),a):t(n)}},980323:function(n,a,s){"use strict";s.r(a),s.d(a,{default:function(){return S}});s(827378);var e=s(494616),t=s(561546),p=s(824246);var o,c=s(146010),i=s(860741),r=s(720325);function u(){var n=(0,c.Z)(),a=(0,t.Z)(n.breakpoints.up("sm"));return(0,p.jsx)("span",{children:"theme.breakpoints.up('sm') matches: ".concat(a)})}var l=(0,i.Z)();var k=s(999857),d=s.n(k);var m,h=s(799120);function y(){var n=(0,t.Z)("(min-width:600px)");return(0,p.jsx)("span",{children:"(min-width:600px) matches: ".concat(n)})}var g,f=s(823315);function v(){var n=function(){var n=(0,c.Z)();return(0,f.Z)(n.breakpoints.keys).reverse().reduce((function(a,s){var e=(0,t.Z)(n.breakpoints.up(s));return!a&&e?s:a}),null)||"xs"}();return(0,p.jsx)("span",{children:"width: ".concat(n)})}var w=(0,i.Z)();var b,M={en:{description:"This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.",location:"/docs/data/material/components/use-media-query/use-media-query.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>useMediaQuery</h1><p class="description">This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.</p>\n\n<p>Some of the key features:</p>\n<ul>\n<li>\u269b\ufe0f It has an idiomatic React API.</li>\n<li>\ud83d\ude80 It&#39;s performant, it observes the document to detect when its media queries change, instead of polling the values periodically.</li>\n<li>\ud83d\udce6 <a href="/size-snapshot">1 kB gzipped</a>.</li>\n<li>\ud83e\udd16 It supports server-side rendering.</li>\n</ul>\n',{component:"modules/components/ComponentLinkHeader.js",design:!1},'<h2 id="heading-basic-media-query"><span class="anchor-link" id="basic-media-query"></span>Basic media query<a aria-labelledby="heading-basic-media-query" class="anchor-link-style" href="#basic-media-query" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You should provide a media query to the first argument of the hook.\nThe media query string can be any valid CSS media query, e.g. <a href="/material-ui/customization/palette/#user-preference"><code>&#39;(prefers-color-scheme: dark)&#39;</code></a>.</p>\n',{demo:"SimpleMediaQuery.js",defaultCodeOpen:!0},'<p>\u26a0\ufe0f You can&#39;t use <code>&#39;print&#39;</code> per browsers limitation, e.g. <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=774398">Firefox</a>.</p>\n<h2 id="heading-using-muis-breakpoint-helpers"><span class="anchor-link" id="using-muis-breakpoint-helpers"></span>Using MUI&#39;s breakpoint helpers<a aria-labelledby="heading-using-muis-breakpoint-helpers" class="anchor-link-style" href="#using-muis-breakpoint-helpers" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You can use MUI&#39;s <a href="/material-ui/customization/breakpoints/">breakpoint helpers</a> as follows:</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> useMediaQuery <span class="token keyword">from</span> <span class="token string">\'@mui/material/useMediaQuery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>breakpoints<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token string">\'sm\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">theme.breakpoints.up(\'sm\') matches: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matches<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',{demo:"ThemeHelper.js",defaultCodeOpen:!1},'<p>Alternatively, you can use a callback function, accepting the theme as a first argument:</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> useMediaQuery <span class="token keyword">from</span> <span class="token string">\'@mui/material/useMediaQuery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">theme</span><span class="token punctuation">)</span> <span class="token operator">=></span> theme<span class="token punctuation">.</span>breakpoints<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token string">\'sm\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">theme.breakpoints.up(\'sm\') matches: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matches<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>\u26a0\ufe0f There is <strong>no default</strong> theme support, you have to inject it in a parent theme provider.</p>\n<h2 id="heading-using-javascript-syntax"><span class="anchor-link" id="using-javascript-syntax"></span>Using JavaScript syntax<a aria-labelledby="heading-using-javascript-syntax" class="anchor-link-style" href="#using-javascript-syntax" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You can use <a href="https://github.com/akiran/json2mq">json2mq</a> to generate media query string from a JavaScript object.</p>\n',{demo:"JavaScriptMedia.js",defaultCodeOpen:!0},'<h2 id="heading-testing"><span class="anchor-link" id="testing"></span>Testing<a aria-labelledby="heading-testing" class="anchor-link-style" href="#testing" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>You need an implementation of <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia">matchMedia</a> in your test environment.</p>\n<p>For instance, <a href="https://jestjs.io/docs/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom">jsdom doesn&#39;t support it yet</a>. You should polyfill it.\nUsing <a href="https://github.com/ericf/css-mediaquery">css-mediaquery</a> to emulate it is recommended.</p>\n<pre><code class="language-js"><span class="token keyword">import</span> mediaQuery <span class="token keyword">from</span> <span class="token string">\'css-mediaquery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">createMatchMedia</span><span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">matches</span><span class="token operator">:</span> mediaQuery<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      width<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">addListener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">removeListener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'MyTests\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>matchMedia <span class="token operator">=</span> <span class="token function">createMatchMedia</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="heading-client-side-only-rendering"><span class="anchor-link" id="client-side-only-rendering"></span>Client-side only rendering<a aria-labelledby="heading-client-side-only-rendering" class="anchor-link-style" href="#client-side-only-rendering" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>To perform the server-side hydration, the hook needs to render twice.\nA first time with <code>false</code>, the value of the server, and a second time with the resolved value.\nThis double pass rendering cycle comes with a drawback. It&#39;s slower.\nYou can set the <code>noSsr</code> option to <code>true</code> if you are doing <strong>client-side only</strong> rendering.</p>\n<pre><code class="language-js"><span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span><span class="token string">\'(min-width:600px)\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">noSsr</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>or it can turn it on globally with the theme:</p>\n<pre><code class="language-js"><span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">MuiUseMediaQuery</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">noSsr</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="heading-server-side-rendering"><span class="anchor-link" id="server-side-rendering"></span>Server-side rendering<a aria-labelledby="heading-server-side-rendering" class="anchor-link-style" href="#server-side-rendering" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><blockquote>\n<p>\u26a0\ufe0f Server-side rendering and client-side media queries are fundamentally at odds.\nBe aware of the tradeoff. The support can only be partial.</p>\n</blockquote>\n<p>Try relying on client-side CSS media queries first.\nFor instance, you could use:</p>\n<ul>\n<li><a href="/system/display/#hiding-elements"><code>&lt;Box display&gt;</code></a></li>\n<li><a href="/material-ui/customization/breakpoints/#css-media-queries"><code>themes.breakpoints.up(x)</code></a></li>\n<li>or <a href="/system/basics/#heading-the-sx-prop"><code>sx prop</code></a></li>\n</ul>\n<p>If none of the above alternatives are an option, you can proceed reading this section of the documentation.</p>\n<p>First, you need to guess the characteristics of the client request, from the server.\nYou have the choice between using:</p>\n<ul>\n<li><strong>User agent</strong>. Parse the user agent string of the client to extract information. Using <a href="https://github.com/faisalman/ua-parser-js">ua-parser-js</a> to parse the user agent is recommended.</li>\n<li><strong>Client hints</strong>. Read the hints the client is sending to the server. Be aware that this feature is <a href="https://caniuse.com/#search=client%20hint">not supported everywhere</a>.</li>\n</ul>\n<p>Finally, you need to provide an implementation of <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia">matchMedia</a> to the <code>useMediaQuery</code> with the previously guessed characteristics.\nUsing <a href="https://github.com/ericf/css-mediaquery">css-mediaquery</a> to emulate matchMedia is recommended.</p>\n<p>For instance on the server-side:</p>\n<pre><code class="language-js"><span class="token keyword">import</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">\'react-dom/server\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> parser <span class="token keyword">from</span> <span class="token string">\'ua-parser-js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> mediaQuery <span class="token keyword">from</span> <span class="token string">\'css-mediaquery\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme<span class="token punctuation">,</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> deviceType <span class="token operator">=</span> <span class="token function">parser</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">\'user-agent\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>device<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">\'desktop\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">ssrMatchMedia</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">matches</span><span class="token operator">:</span> mediaQuery<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token comment">// The estimated CSS width of the browser.</span>\n      <span class="token literal-property property">width</span><span class="token operator">:</span> deviceType <span class="token operator">===</span> <span class="token string">\'mobile\'</span> <span class="token operator">?</span> <span class="token string">\'0px\'</span> <span class="token operator">:</span> <span class="token string">\'1024px\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Change the default options of useMediaQuery</span>\n      <span class="token literal-property property">MuiUseMediaQuery</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          ssrMatchMedia<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// \u2026</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',{demo:"ServerSide.js",defaultCodeOpen:!1},'<p>Make sure you provide the same custom match media implementation to the client-side to guarantee a hydration match.</p>\n<h2 id="heading-migrating-from-withwidth"><span class="anchor-link" id="migrating-from-withwidth"></span>Migrating from <code>withWidth()</code><a aria-labelledby="heading-migrating-from-withwidth" class="anchor-link-style" href="#migrating-from-withwidth" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>The <code>withWidth()</code> higher-order component injects the screen width of the page.\nYou can reproduce the same behavior with a <code>useWidth</code> hook:</p>\n',{demo:"UseWidth.js"},'<h2 id="heading-api"><span class="anchor-link" id="api"></span>API<a aria-labelledby="heading-api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="heading-usemediaquery-query-options-matches"><span class="anchor-link" id="usemediaquery-query-options-matches"></span><code>useMediaQuery(query, [options]) =&gt; matches</code><a aria-labelledby="heading-usemediaquery-query-options-matches" class="anchor-link-style" href="#usemediaquery-query-options-matches" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><h4>Arguments</h4><ol>\n<li><code>query</code> (<em>string</em> | <em>func</em>): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.</li>\n<li><code>options</code> (<em>object</em> [optional]):</li>\n</ol>\n<ul>\n<li><code>options.defaultMatches</code> (<em>bool</em> [optional]):\nAs <code>window.matchMedia()</code> is unavailable on the server,\nwe return a default matches during the first mount. The default value is <code>false</code>.</li>\n<li><code>options.matchMedia</code> (<em>func</em> [optional]): You can provide your own implementation of <em>matchMedia</em>. This can be used for handling an iframe content window.</li>\n<li><code>options.noSsr</code> (<em>bool</em> [optional]): Defaults to <code>false</code>.\nTo perform the server-side hydration, the hook needs to render twice.\nA first time with <code>false</code>, the value of the server, and a second time with the resolved value.\nThis double pass rendering cycle comes with a drawback. It&#39;s slower.\nYou can set this option to <code>true</code> if you are doing <strong>client-side only</strong> rendering.</li>\n<li><code>options.ssrMatchMedia</code> (<em>func</em> [optional]): You can provide your own implementation of <em>matchMedia</em> in a <a href="#server-side-rendering">server-side rendering context</a>.</li>\n</ul>\n<p>Note: You can change the default options using the <a href="/material-ui/customization/theme-components/#default-props"><code>default props</code></a> feature of the theme with the <code>MuiUseMediaQuery</code> key.</p>\n<h4>Returns</h4><p><code>matches</code>: Matches is <code>true</code> if the document currently matches the media query and <code>false</code> when it does not.</p>\n<h4>Examples</h4><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> useMediaQuery <span class="token keyword">from</span> <span class="token string">\'@mui/material/useMediaQuery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SimpleMediaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span><span class="token string">\'(min-width:600px)\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width:600px) matches: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matches<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n'],toc:[{text:"Basic media query",level:2,hash:"basic-media-query",children:[]},{text:"Using MUI&#39;s breakpoint helpers",level:2,hash:"using-muis-breakpoint-helpers",children:[]},{text:"Using JavaScript syntax",level:2,hash:"using-javascript-syntax",children:[]},{text:"Testing",level:2,hash:"testing",children:[]},{text:"Client-side only rendering",level:2,hash:"client-side-only-rendering",children:[]},{text:"Server-side rendering",level:2,hash:"server-side-rendering",children:[]},{text:"Migrating from withWidth(&#8203;)",level:2,hash:"migrating-from-withwidth",children:[]},{text:"API",level:2,hash:"api",children:[{text:"useMediaQuery(&#8203;query, [options]) =&gt; matches",level:3,hash:"usemediaquery-query-options-matches"}]}],title:"Media queries in React for responsive design",headers:{product:"material-ui",title:"Media queries in React for responsive design",githubLabel:"hook: useMediaQuery",components:[]}},pt:{description:"Este \xe9 um hook de consulta de m\xeddia CSS para React. Ele ouve correspond\xeancias para uma consulta de m\xeddia no CSS. Permite a renderiza\xe7\xe3o de componentes com base no fato de a consulta corresponder ou n\xe3o.",location:"/docs/data/material/components/use-media-query/use-media-query-pt.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>useMediaQuery</h1><p class="description">Este \xe9 um hook de consulta de m\xeddia CSS para React. Ele ouve correspond\xeancias para uma consulta de m\xeddia no CSS. Permite a renderiza\xe7\xe3o de componentes com base no fato de a consulta corresponder ou n\xe3o.</p>\n\n<p>Algumas das principais caracter\xedsticas:</p>\n<ul>\n<li>\u269b\ufe0f Tem uma API React idiom\xe1tica.</li>\n<li>\ud83d\ude80 \xc9 perform\xe1tico, ele observa o documento para detectar quando suas consultas de m\xeddia mudam, em vez de pesquisar os valores periodicamente.</li>\n<li>\ud83d\udce6 <a href="/size-snapshot">1 kB gzipped</a>.</li>\n<li>\ud83e\udd16 Suporta a renderiza\xe7\xe3o do lado do servidor.</li>\n</ul>\n<p><a href="/pt/system/palette/">A paleta</a> com fun\xe7\xf5es de estilo.</p>\n<h2 id="heading-basic-media-query"><span class="anchor-link" id="basic-media-query"></span>Consulta de m\xeddia simples<a aria-labelledby="heading-basic-media-query" class="anchor-link-style" href="#basic-media-query" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Voc\xea deve fornecer uma consulta de m\xeddia ao primeiro argumento do hook. A string de consulta de m\xeddia pode ser qualquer consulta de m\xeddia CSS v\xe1lida, por exemplo <a href="/pt/material-ui/customization/palette/#user-preference"><code>&#39;(prefers-color-scheme: dark)&#39;</code></a>.</p>\n',{demo:"SimpleMediaQuery.js",defaultCodeOpen:!0},'<p>\u26a0\ufe0f Voc\xea n\xe3o pode usar <code>&#39;print&#39;</code> devido a limita\xe7\xe3o de navegadores, por exemplo, este bug presente no <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=774398">Firefox</a>.</p>\n<h2 id="heading-using-muis-breakpoint-helpers"><span class="anchor-link" id="using-muis-breakpoint-helpers"></span>Usando auxiliares de ponto de quebra do Material UI<a aria-labelledby="heading-using-muis-breakpoint-helpers" class="anchor-link-style" href="#using-muis-breakpoint-helpers" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Voc\xea pode usar os <a href="/pt/material-ui/customization/breakpoints/">auxiliares de ponto de quebra</a> do Material UI da seguinte maneira:</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> useMediaQuery <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/useMediaQuery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>breakpoints<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token string">\'sm\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">theme.breakpoints.up(\'sm\') matches: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matches<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',{demo:"ThemeHelper.js",defaultCodeOpen:!1},'<p>Como alternativa, voc\xea pode usar uma fun\xe7\xe3o de retorno, aceitando o tema como um primeiro argumento:</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> useMediaQuery <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/useMediaQuery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">theme</span><span class="token punctuation">)</span> <span class="token operator">=></span> theme<span class="token punctuation">.</span>breakpoints<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token string">\'sm\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">theme.breakpoints.up(\'sm\') matches: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matches<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Voc\xea pode usar <a href="https://github.com/akiran/json2mq">json2mq</a> para gerar uma string de consulta de m\xeddia a partir de um objeto JavaScript.</p>\n<h2 id="heading-using-javascript-syntax"><span class="anchor-link" id="using-javascript-syntax"></span>Usando a sintaxe JavaScript<a aria-labelledby="heading-using-javascript-syntax" class="anchor-link-style" href="#using-javascript-syntax" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Voc\xea pode usar <a href="https://github.com/akiran/json2mq">json2mq</a> para gerar uma string de consulta de m\xeddia a partir de um objeto JavaScript.</p>\n',{demo:"JavaScriptMedia.js",defaultCodeOpen:!0},'<h2 id="heading-testing"><span class="anchor-link" id="testing"></span>Testando<a aria-labelledby="heading-testing" class="anchor-link-style" href="#testing" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Voc\xea precisa de uma implementa\xe7\xe3o de <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia">matchMedia</a> em seu ambiente de teste.</p>\n<p>Por exemplo, <a href="https://jestjs.io/docs/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom">jsdom n\xe3o suporta ainda</a>. Voc\xea deve usar um polyfill para isso. \xc9 recomend\xe1vel usar <a href="https://github.com/ericf/css-mediaquery">css-mediaquery</a> para emular.</p>\n<pre><code class="language-js"><span class="token keyword">import</span> mediaQuery <span class="token keyword">from</span> <span class="token string">\'css-mediaquery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">createMatchMedia</span><span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">matches</span><span class="token operator">:</span> mediaQuery<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token punctuation">{</span> width <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">addListener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">removeListener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'MeusTestes\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>matchMedia <span class="token operator">=</span> <span class="token function">createMatchMedia</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="heading-client-side-only-rendering"><span class="anchor-link" id="client-side-only-rendering"></span>Renderiza\xe7\xe3o somente do lado do cliente<a aria-labelledby="heading-client-side-only-rendering" class="anchor-link-style" href="#client-side-only-rendering" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>Para executar a hidrata\xe7\xe3o no lado do servidor, o hook precisa renderizar duas vezes. Uma primeira vez com <code>false</code>, o valor do servidor e uma segunda vez com o valor resolvido. Este ciclo de renderiza\xe7\xe3o de dupla passagem tem uma desvantagem. \xc9 mais lento. Voc\xea pode definir a op\xe7\xe3o <code>noSsr</code> para <code>true</code> se voc\xea estiver fazendo renderiza\xe7\xe3o <strong>somente no lado cliente</strong>.</p>\n<pre><code class="language-js"><span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span><span class="token string">\'(min-width:600px)\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">noSsr</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>ou pode ativar globalmente com o tema:</p>\n<pre><code class="language-js"><span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">MuiUseMediaQuery</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">noSsr</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="heading-server-side-rendering"><span class="anchor-link" id="server-side-rendering"></span>Renderiza\xe7\xe3o do lado servidor<a aria-labelledby="heading-server-side-rendering" class="anchor-link-style" href="#server-side-rendering" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><blockquote>\n<p>\u26a0\ufe0f Renderiza\xe7\xe3o do lado servidor e consultas de m\xeddia do lado cliente s\xe3o fundamentalmente conflitantes. Esteja ciente da escolha. O suporte s\xf3 pode ser parcial.</p>\n</blockquote>\n<p>Tente confiar em consultas de m\xeddia CSS do lado do cliente primeiro. Por exemplo, voc\xea poderia usar:</p>\n<ul>\n<li><a href="/pt/system/display/#hiding-elements"><code>&lt;Box display&gt;</code></a></li>\n<li><a href="/pt/material-ui/customization/breakpoints/#css-media-queries"><code>themes.breakpoints.up(x)</code></a></li>\n<li>or <a href="/pt/system/basics/#heading-the-sx-prop"><code>sx prop</code></a></li>\n</ul>\n<p>Se nenhuma das alternativas acima for uma op\xe7\xe3o, voc\xea poder\xe1 continuar lendo esta se\xe7\xe3o da documenta\xe7\xe3o.</p>\n<p>Primeiro, voc\xea precisa adivinhar as caracter\xedsticas da solicita\xe7\xe3o do cliente, no servidor. Voc\xea tem a op\xe7\xe3o entre usar:</p>\n<ul>\n<li><strong>User agent</strong>. Analise a string do user agent do cliente para extrair informa\xe7\xf5es. \xc9 recomend\xe1vel usar <a href="https://github.com/faisalman/ua-parser-js">ua-parser-js</a> para analisar o user agent.</li>\n<li><strong>Client hints</strong>. Leia as dicas que o cliente est\xe1 enviando para o servidor. Esteja ciente de que esse recurso <a href="https://caniuse.com/#search=client%20hint">n\xe3o \xe9 suportado em qualquer lugar</a>.</li>\n</ul>\n<p>Por fim, voc\xea precisa fornecer uma implementa\xe7\xe3o de <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia">matchMedia</a> para o <code>useMediaQuery</code> com as caracter\xedsticas adivinhadas anteriormente. \xc9 recomend\xe1vel usar <a href="https://github.com/ericf/css-mediaquery">css-mediaquery</a> para emular o matchMedia.</p>\n<p>Por exemplo, no lado do servidor:</p>\n<pre><code class="language-js"><span class="token keyword">import</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">\'react-dom/server\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> parser <span class="token keyword">from</span> <span class="token string">\'ua-parser-js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> mediaQuery <span class="token keyword">from</span> <span class="token string">\'css-mediaquery\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> deviceType <span class="token operator">=</span> <span class="token function">parser</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">\'user-agent\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>device<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">\'desktop\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">ssrMatchMedia</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">matches</span><span class="token operator">:</span> mediaQuery<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token comment">// O CSS estimado pelo navegador.</span>\n      <span class="token literal-property property">width</span><span class="token operator">:</span> deviceType <span class="token operator">===</span> <span class="token string">\'mobile\'</span> <span class="token operator">?</span> <span class="token string">\'0px\'</span> <span class="token operator">:</span> <span class="token string">\'1024px\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Modifica as op\xe7\xf5es padr\xe3o de useMediaQuery</span>\n      <span class="token literal-property property">MuiUseMediaQuery</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          ssrMatchMedia<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// \u2026</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',{demo:"ServerSide.js",defaultCodeOpen:!1},'<p>Certifique-se de fornecer a mesma implementa\xe7\xe3o de m\xeddia de correspond\xeancia customizada para o lado do cliente para garantir uma correspond\xeancia de hidrata\xe7\xe3o.</p>\n<h2 id="heading-migrating-from-withwidth"><span class="anchor-link" id="migrating-from-withwidth"></span>Migrando de <code>withWidth()</code><a aria-labelledby="heading-migrating-from-withwidth" class="anchor-link-style" href="#migrating-from-withwidth" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>O componente de ordem superior <code>withWidth()</code> injeta a largura da tela da p\xe1gina. Voc\xea pode reproduzir o mesmo comportamento com o hook <code>useWidth</code>:</p>\n',{demo:"UseWidth.js"},'<h2 id="heading-api"><span class="anchor-link" id="api"></span>API<a aria-labelledby="heading-api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="heading-usemediaquery-query-options-matches"><span class="anchor-link" id="usemediaquery-query-options-matches"></span><code>useMediaQuery(query, [options]) =&gt; matches</code><a aria-labelledby="heading-usemediaquery-query-options-matches" class="anchor-link-style" href="#usemediaquery-query-options-matches" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><h4>Argumentos</h4><ol>\n<li><code>query</code> (<em>string</em> | <em>func</em>): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.</li>\n<li><code>options</code> (<em>object</em> [optional]):</li>\n</ol>\n<ul>\n<li><code>options.defaultMatches</code> (<em>bool</em> [optional]): As <code>window.matchMedia()</code> is unavailable on the server, we return a default matches during the first mount. O valor padr\xe3o \xe9 <code>false</code>.</li>\n<li><code>options.matchMedia</code> (<em>func</em> [optional]): You can provide your own implementation of <em>matchMedia</em>. Isso pode ser usado para manipular uma janela iframe com conte\xfado.</li>\n<li><code>options.noSsr</code> (<em>bool</em> [opcional]): Padr\xe3o <code>false</code>. Para executar a hidrata\xe7\xe3o no lado do servidor, o hook precisa renderizar duas vezes. Uma primeira vez com <code>false</code>, o valor do servidor e uma segunda vez com o valor resolvido. Este ciclo de renderiza\xe7\xe3o de dupla passagem tem uma desvantagem. \xc9 mais lento. Voc\xea pode definir esta op\xe7\xe3o para <code>true</code> se voc\xea estiver fazendo renderiza\xe7\xe3o <strong>somente no lado cliente</strong>.</li>\n<li><code>options.ssrMatchMedia</code> (<em>func</em> [optional]): You can provide your own implementation of <em>matchMedia</em> in a <a href="#server-side-rendering">server-side rendering context</a>.</li>\n</ul>\n<p>Nota: Voc\xea pode alterar as op\xe7\xf5es padr\xe3o usando <a href="/pt/material-ui/customization/theme-components/#default-props"><code>default props</code></a>, este recurso pertence ao tema atrav\xe9s da chave <code>MuiUseMediaQuery</code>.</p>\n<h4>Retornos</h4><p><code>matches</code>: Matches \xe9 <code>true</code> se o documento coincidir com a consulta de m\xeddia, e <code>false</code> quando isso n\xe3o ocorrer.</p>\n<h4>Exemplos</h4><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> useMediaQuery <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/useMediaQuery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SimpleMediaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span><span class="token string">\'(min-width:600px)\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width:600px) matches: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matches<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n'],toc:[{text:"Consulta de m\xeddia simples",level:2,hash:"basic-media-query",children:[]},{text:"Usando auxiliares de ponto de quebra do Material UI",level:2,hash:"using-muis-breakpoint-helpers",children:[]},{text:"Usando a sintaxe JavaScript",level:2,hash:"using-javascript-syntax",children:[]},{text:"Testando",level:2,hash:"testing",children:[]},{text:"Renderiza\xe7\xe3o somente do lado do cliente",level:2,hash:"client-side-only-rendering",children:[]},{text:"Renderiza\xe7\xe3o do lado servidor",level:2,hash:"server-side-rendering",children:[]},{text:"Migrando de withWidth(&#8203;)",level:2,hash:"migrating-from-withwidth",children:[]},{text:"API",level:2,hash:"api",children:[{text:"useMediaQuery(&#8203;query, [options]) =&gt; matches",level:3,hash:"usemediaquery-query-options-matches"}]}],title:"Consulta de m\xeddia no React para design responsivo",headers:{product:"material-ui",title:"Consulta de m\xeddia no React para design responsivo",githubLabel:"hook: useMediaQuery",components:[]}},zh:{description:"\u8fd9\u662f React \u7684 CSS \u5a92\u4f53\u67e5\u8be2 \uff08Media queries\uff09hook\u3002 \u5b83\u76d1\u542c\u4e0e CSS \u5a92\u4f53\u67e5\u8be2\u7684\u5339\u914d\u7684\u5185\u5bb9\u3002 \u5b83\u5141\u8bb8\u6839\u636e\u67e5\u8be2\u7684\u7ed3\u679c\u662f\u5426\u5339\u914d\u6765\u6e32\u67d3\u7ec4\u4ef6\u3002",location:"/docs/data/material/components/use-media-query/use-media-query-zh.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n  <symbol id="anchor-link-icon" viewBox="0 0 16 16">\n    <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" />\n  </symbol>\n</svg>','<h1>useMediaQuery</h1><p class="description">\u8fd9\u662f React \u7684 CSS \u5a92\u4f53\u67e5\u8be2 \uff08Media queries\uff09hook\u3002 \u5b83\u76d1\u542c\u4e0e CSS \u5a92\u4f53\u67e5\u8be2\u7684\u5339\u914d\u7684\u5185\u5bb9\u3002 \u5b83\u5141\u8bb8\u6839\u636e\u67e5\u8be2\u7684\u7ed3\u679c\u662f\u5426\u5339\u914d\u6765\u6e32\u67d3\u7ec4\u4ef6\u3002</p>\n\n<p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u91cd\u8981\u7684\u7279\u70b9\uff1a</p>\n<ul>\n<li>\u269b\ufe0f \u5b83\u6709\u4e00\u4e2a\u7b26\u5408\u7528\u6237\u4f7f\u7528\u4e60\u60ef\u7684 React API\u3002</li>\n<li>\ud83d\ude80 \u5b83\u662f\u9ad8\u6027\u80fd\u7684\uff0c\u539f\u7406\u662f\u901a\u8fc7\u89c2\u6d4b\u6587\u6863\u7684\u5a92\u4f53\u67e5\u8be2\u503c\u53d1\u751f\u66f4\u6539\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5b9a\u671f\u8f6e\u8be2\u7684\u65b9\u6cd5\u6765\u76d1\u542c\u5176\u7ed3\u679c\u3002</li>\n<li>\ud83d\udce6 <a href="/size-snapshot">1kB \u5df2\u538b\u7f29\u7684\u5305</a>\u3002</li>\n<li>\ud83e\udd16 \u5b83\u652f\u6301\u670d\u52a1\u5668\u7aef\u6e32\u67d3\u3002</li>\n</ul>\n',{component:"modules/components/ComponentLinkHeader.js",design:!1},'<h2 id="heading-basic-media-query"><span class="anchor-link" id="basic-media-query"></span>\u7b80\u5355\u7684\u5a92\u4f53\u67e5\u8be2<a aria-labelledby="heading-basic-media-query" class="anchor-link-style" href="#basic-media-query" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u4f60\u5e94\u8be5\u5c06\u5a92\u4f53\u67e5\u8be2\u63d0\u4f9b\u7ed9 hook \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 \u5a92\u4f53\u67e5\u8be2\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f\u4efb\u4f55\u6709\u6548\u7684 CSS \u5a92\u4f53\u67e5\u8be2\uff0c\u4f8b\u5982 <a href="/zh/material-ui/customization/palette/#user-preference"><code>&#39;(prefers-color-scheme: dark)&#39;</code></a>\u3002</p>\n',{demo:"SimpleMediaQuery.js",defaultCodeOpen:!0},'<p>\u26a0\ufe0f \u7531\u4e8e\u6bcf\u4e2a\u6d4f\u89c8\u5668\u7684\u9650\u5236\uff0c\u4f60\u4e0d\u80fd\u4f7f\u7528 <code>&#39;print&#39;</code>\uff0c\u4f8b\u5982 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=774398">Firefox</a> \u4e0a\u7684\u8fd9\u4e2a\u95ee\u9898\u3002</p>\n<h2 id="heading-using-muis-breakpoint-helpers"><span class="anchor-link" id="using-muis-breakpoint-helpers"></span>\u4f7f\u7528 Material UI \u7684\u65ad\u70b9\u8f85\u52a9\u529f\u80fd<a aria-labelledby="heading-using-muis-breakpoint-helpers" class="anchor-link-style" href="#using-muis-breakpoint-helpers" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u6309\u7167\u5982\u4e0b\u6240\u793a\u7684\u4f8b\u5b50\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528 Material UI \u7684 <a href="/zh/material-ui/customization/breakpoints/">\u65ad\u70b9\u8f85\u52a9\u529f\u80fd</a> \uff1a</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> useMediaQuery <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/useMediaQuery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>breakpoints<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token string">\'sm\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">theme.breakpoints.up(\'sm\') matches: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matches<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',{demo:"ThemeHelper.js",defaultCodeOpen:!1},'<p>\u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f theme\uff1a</p>\n<pre><code class="language-jsx"><span class="token keyword">import</span> useMediaQuery <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/useMediaQuery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">theme</span><span class="token punctuation">)</span> <span class="token operator">=></span> theme<span class="token punctuation">.</span>breakpoints<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token string">\'sm\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">theme.breakpoints.up(\'sm\') matches: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matches<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>\u26a0\ufe0f \u7531\u4e8e\u8fd9\u4e2a\u65b9\u6cd5<strong>\u6ca1\u6709\u9ed8\u8ba4\u7684</strong>\u4e3b\u9898\u652f\u6301\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u5c06\u5b83\u6ce8\u5165\u5230\u7236\u7ea7\u4e3b\u9898\u63d0\u4f9b\u8005\uff08parent theme provider\uff09\u4e2d\u3002</p>\n<h2 id="heading-using-javascript-syntax"><span class="anchor-link" id="using-javascript-syntax"></span>\u4f7f\u7528 JavaScript \u7684\u8bed\u6cd5<a aria-labelledby="heading-using-javascript-syntax" class="anchor-link-style" href="#using-javascript-syntax" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u4f60\u53ef\u4ee5\u4f7f\u7528 <a href="https://github.com/akiran/json2mq">json2mq</a> \u6765\u4ece JavaScript \u5bf9\u8c61\u4e2d\u751f\u6210\u5a92\u4f53\u67e5\u8be2\u5b57\u7b26\u4e32\u3002</p>\n',{demo:"JavaScriptMedia.js",defaultCodeOpen:!0},'<h2 id="heading-testing"><span class="anchor-link" id="testing"></span>\u6d4b\u8bd5<a aria-labelledby="heading-testing" class="anchor-link-style" href="#testing" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u4f60\u9700\u8981\u5728\u6d4b\u8bd5\u73af\u5883\u4e2d\u5b9e\u73b0 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia">matchMedia</a>\u3002</p>\n<p>\u4f8b\u5982\uff1a<a href="https://jestjs.io/docs/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom">\u6682\u65f6\u8fd8\u4e0d\u652f\u6301 jsdom</a>\u3002 \u6240\u4ee5\u4f60\u5e94\u6765\u517c\u5bb9\uff08polyfill\uff09\u5b83\u3002 \u6211\u4eec\u63a8\u8350\u4f7f\u7528 <a href="https://github.com/ericf/css-mediaquery">css-mediaquery</a> \u6765\u521b\u9020\u4e00\u4e2a\u6a21\u62df\u73af\u5883\u4ece\u800c\u8fbe\u5230\u517c\u5bb9\u7684\u76ee\u7684\u3002</p>\n<pre><code class="language-js"><span class="token keyword">import</span> mediaQuery <span class="token keyword">from</span> <span class="token string">\'css-mediaquery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">createMatchMedia</span><span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">matches</span><span class="token operator">:</span> mediaQuery<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      width<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">addListener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">removeListener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'MyTests\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>matchMedia <span class="token operator">=</span> <span class="token function">createMatchMedia</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="heading-client-side-only-rendering"><span class="anchor-link" id="client-side-only-rendering"></span>\u4ec5\u5728\u5ba2\u6237\u7aef\u6e32\u67d3<a aria-labelledby="heading-client-side-only-rendering" class="anchor-link-style" href="#client-side-only-rendering" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p>\u8981\u548c\u670d\u52a1\u5668\u8fdb\u884c\u540c\u6b65\u4f7f\u7528\uff08hydration\uff09\uff0chook \u9700\u8981\u6e32\u67d3\u4e24\u6b21\u3002 \u7b2c\u4e00\u6b21\u4f7f\u7528 <code>false</code> \u8868\u793a\u670d\u52a1\u7aef\u7684\u503c\uff0c\u7b2c\u4e8c\u6b21\u4f7f\u7528\u5df2\u89e3\u6790\u7684\u503c\u3002 \u8fd9\u4e2a\u53cc\u5411\u6e32\u67d3\u5468\u671f\u5e26\u6709\u4e00\u4e2a\u7f3a\u70b9\u3002 \u901f\u5ea6\u8f83\u6162\u3002 \u5982\u679c\u4f60\u53ea\u9700\u8981<strong>\u5ba2\u6237\u7aef\u6e32\u67d3</strong>\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u8bbe\u7f6e <code>noSsr</code> \u9009\u9879\u4e3a <code>true</code>\u3002</p>\n<pre><code class="language-js"><span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span><span class="token string">\'(min-width:600px)\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">noSsr</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>\u6216\u8005\u4f60\u53ef\u4ee5\u901a\u8fc7\u5168\u5c40\u4e3b\u9898\u8bbe\u7f6e\u6765\u542f\u7528\u5b83\uff1a</p>\n<pre><code class="language-js"><span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">MuiUseMediaQuery</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">noSsr</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="heading-server-side-rendering"><span class="anchor-link" id="server-side-rendering"></span>\u670d\u52a1\u7aef\u6e32\u67d3<a aria-labelledby="heading-server-side-rendering" class="anchor-link-style" href="#server-side-rendering" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><blockquote>\n<p>\u26a0\ufe0f \u4ece\u6839\u672c\u4e0a\u6765\u770b\uff0c\u670d\u52a1\u7aef\u6e32\u67d3\u548c\u5ba2\u6237\u7aef\u7684\u5a92\u4f53\u67e5\u8be2\u662f\u77db\u76fe\u7684\u3002 \u6240\u4ee5\u4f60\u9700\u8981\u5728\u5176\u4e2d\u53d6\u820d\u3002 \u652f\u6301\u53ea\u80fd\u662f\u90e8\u5206\u7684\u3002</p>\n</blockquote>\n<p>\u4f60\u53ef\u4ee5\u5148\u5c1d\u8bd5\u4f9d\u8d56\u4e8e\u5ba2\u6237\u7aef\u7684 CSS \u5a92\u4f53\u67e5\u8be2\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\uff1a</p>\n<ul>\n<li><a href="/zh/system/display/#hiding-elements"><code>&lt;Box display&gt;</code></a></li>\n<li><a href="/zh/material-ui/customization/breakpoints/#css-media-queries"><code>themes.breakpoints.up(x)</code></a></li>\n<li>or <a href="/zh/system/basics/#heading-the-sx-prop"><code>sx prop</code></a></li>\n</ul>\n<p>\u5982\u679c\u4e0a\u8ff0\u7684\u65b9\u6848\u90fd\u4e0d\u53ef\u7528\uff0c\u90a3\u4e48\u4f60\u4e5f\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u672c\u8282\u6587\u6863\u7684\u5176\u4f59\u5185\u5bb9\u3002</p>\n<p>\u9996\u5148\uff0c\u4f60\u9700\u8981\u4ece\u670d\u52a1\u7aef\u4e0a\u731c\u6d4b\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u7279\u5f81\u3002 \u4f60\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\uff1a</p>\n<ul>\n<li><strong>\u7528\u6237\u4ee3\u7406\uff08User agent\uff09</strong>\u3002 \u89e3\u6790\u5ba2\u6237\u7aef\u4e0a\u7528\u6237\u4ee3\u7406\u7684\u5b57\u7b26\u4e32\u6765\u63d0\u53d6\u4fe1\u606f\u3002 \u6211\u4eec\u63a8\u8350\u4f7f\u7528 <a href="https://github.com/faisalman/ua-parser-js">ua-parser-js</a> \u6765\u89e3\u6790\u7528\u6237\u4ee3\u7406\u4fe1\u606f\u3002</li>\n<li><strong>\u5ba2\u6237\u7aef\u63d0\u793a\uff08Client hints\uff09</strong>\u3002 \u8bfb\u53d6\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u9001\u7684\u63d0\u793a\u3002 \u8bf7\u6ce8\u610f\uff0c<a href="https://caniuse.com/#search=client%20hint">\u5e76\u4e0d\u662f\u6240\u6709\u6d4f\u89c8\u5668\u90fd\u4f1a\u652f\u6301</a> \u6b64\u529f\u80fd\u3002</li>\n</ul>\n<p>\u6700\u540e\uff0c\u4f60\u9700\u8981\u4e3a <code>useMediaQuery</code> \u63d0\u4f9b\u4e00\u4e2a\u5177\u6709\u9884\u5148\u731c\u6d4b\u7279\u5f81\u7684 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia">matchMedia</a> \u6765\u5b9e\u73b0\u3002 \u6211\u4eec\u5efa\u8bae\u4f7f\u7528 <a href="https://github.com/ericf/css-mediaquery">css-mediaquery</a> \u6765\u6a21\u62df matchMedia \u73af\u5883\u3002</p>\n<p>\u4f8b\u5982\uff0c\u5728\u670d\u52a1\u7aef\u4e0a\uff1a</p>\n<pre><code class="language-js"><span class="token keyword">import</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">\'react-dom/server\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> parser <span class="token keyword">from</span> <span class="token string">\'ua-parser-js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> mediaQuery <span class="token keyword">from</span> <span class="token string">\'css-mediaquery\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/styles\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> deviceType <span class="token operator">=</span> <span class="token function">parser</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">\'user-agent\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>device<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">\'desktop\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">ssrMatchMedia</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">matches</span><span class="token operator">:</span> mediaQuery<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token comment">// \u6d4f\u89c8\u5668\u7684 CSS \u5bbd\u5ea6\u9884\u8ba1\u503c</span>\n      <span class="token literal-property property">width</span><span class="token operator">:</span> deviceType <span class="token operator">===</span> <span class="token string">\'mobile\'</span> <span class="token operator">?</span> <span class="token string">\'0px\'</span> <span class="token operator">:</span> <span class="token string">\'1024px\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>ThemeProvider\n      theme<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token comment">// \u66f4\u6539 useMediaQuery \u7684\u9ed8\u8ba4\u9009\u9879</span>\n          <span class="token literal-property property">MuiUseMediaQuery</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            ssrMatchMedia<span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token operator">></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// \u2026</span>\n<span class="token punctuation">}</span>\n      <span class="token literal-property property">width</span><span class="token operator">:</span> deviceType <span class="token operator">===</span> <span class="token string">\'mobile\'</span> <span class="token operator">?</span> <span class="token string">\'0px\'</span> <span class="token operator">:</span> <span class="token string">\'1024px\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>ThemeProvider\n      theme<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token comment">// \u66f4\u6539 useMediaQuery \u7684\u9ed8\u8ba4\u9009\u9879</span>\n          <span class="token literal-property property">MuiUseMediaQuery</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            ssrMatchMedia<span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token operator">></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// \u2026</span>\n<span class="token punctuation">}</span>\n      <span class="token literal-property property">width</span><span class="token operator">:</span> deviceType <span class="token operator">===</span> <span class="token string">\'mobile\'</span> <span class="token operator">?</span> <span class="token string">\'0px\'</span> <span class="token operator">:</span> <span class="token string">\'1024px\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Change the default options of useMediaQuery</span>\n      <span class="token literal-property property">MuiUseMediaQuery</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          ssrMatchMedia<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// \u2026</span>\n<span class="token punctuation">}</span>\n      <span class="token literal-property property">width</span><span class="token operator">:</span> deviceType <span class="token operator">===</span> <span class="token string">\'mobile\'</span> <span class="token operator">?</span> <span class="token string">\'0px\'</span> <span class="token operator">:</span> <span class="token string">\'1024px\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Change the default options of useMediaQuery</span>\n      <span class="token literal-property property">MuiUseMediaQuery</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          ssrMatchMedia<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// \u2026</span>\n<span class="token punctuation">}</span>\n</code></pre>\n',{demo:"ServerSide.js",defaultCodeOpen:!1},'<p>\u786e\u4fdd\u60a8\u63d0\u4f9b\u76f8\u540c\u7684\u81ea\u5b9a\u4e49\u5339\u914d\u5a92\u4f53\u5b9e\u73b0\u5230\u5ba2\u6237\u7aef\uff0c\u8fd9\u6837\u80fd\u591f\u4fdd\u8bc1\u6ce8\u6c34\u6e32\u67d3\u7684\u5339\u914d\u3002</p>\n<h2 id="heading-migrating-from-withwidth"><span class="anchor-link" id="migrating-from-withwidth"></span>\u4ece <code>withWidth()</code> \u8fc1\u79fb<a aria-labelledby="heading-migrating-from-withwidth" class="anchor-link-style" href="#migrating-from-withwidth" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><p><code>withWidth()</code> \u9ad8\u9636\u7ec4\u4ef6\u6ce8\u5165\u4e86\u9875\u9762\u7684\u5c4f\u5e55\u5bbd\u5ea6\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 <code>useWidth</code> hook \u6765\u5b9e\u73b0\u76f8\u540c\u7684\u64cd\u4f5c\uff1a</p>\n',{demo:"UseWidth.js"},'<h2 id="heading-api"><span class="anchor-link" id="api"></span>API<a aria-labelledby="heading-api" class="anchor-link-style" href="#api" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h2><h3 id="heading-usemediaquery-query-options-matches"><span class="anchor-link" id="usemediaquery-query-options-matches"></span><code>useMediaQuery(query, [options]) =&gt; matches</code><a aria-labelledby="heading-usemediaquery-query-options-matches" class="anchor-link-style" href="#usemediaquery-query-options-matches" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a></h3><h4>\u53c2\u6570</h4><ol>\n<li><code>query</code> (<em>string</em> | <em>func</em>): A string representing the media query to handle or a callback function accepting the theme (in the context) that returns a string.</li>\n<li><code>options</code> (<em>object</em> [optional]):</li>\n</ol>\n<ul>\n<li><code>options.defaultMatches</code> (<em>bool</em> [optional]): As <code>window.matchMedia()</code> is unavailable on the server, we return a default matches during the first mount. \u9ed8\u8ba4\u503c\u4e3a <code>false</code>\u3002 \u9ed8\u8ba4\u503c\u4e3a <code>false</code>\u3002</li>\n<li><code>options.matchMedia</code> (<em>func</em> [optional]): You can provide your own implementation of <em>matchMedia</em>. \u7528\u5176\u60a8\u53ef\u4ee5\u5904\u7406\u4e00\u4e2a iframe \u5185\u5bb9\u7a97\u53e3\u3002 \u7528\u5176\u60a8\u53ef\u4ee5\u5904\u7406\u4e00\u4e2a iframe \u5185\u5bb9\u7a97\u53e3\u3002</li>\n<li><code>options.noSsr</code> (<em>bool</em> [optional])\uff1a\u9ed8\u8ba4\u4e3a <code>false</code>\u3002 \u8981\u548c\u670d\u52a1\u5668\u8fdb\u884c\u540c\u6b65\u4f7f\u7528\uff08hydration\uff09\uff0chook \u9700\u8981\u6e32\u67d3\u4e24\u6b21\u3002 A first time with <code>false</code>, the value of the server, and a second time with the resolved value. \u8fd9\u4e2a\u53cc\u5411\u6e32\u67d3\u5468\u671f\u5e26\u6709\u4e00\u4e2a\u7f3a\u70b9\u3002 \u8fd9\u4e2a\u53cc\u5411\u6e32\u67d3\u5468\u671f\u5e26\u6709\u4e00\u4e2a\u7f3a\u70b9\u3002 \u901f\u5ea6\u8f83\u6162\u3002 \u5982\u679c\u4f60\u53ea\u9700\u8981 <strong>\u5ba2\u6237\u7aef</strong>\u6e32\u67d3\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u8be5\u9009\u9879\u8bbe\u7f6e\u4e3a <code>true</code>\u3002</li>\n<li><code>options.ssrMatchMedia</code> (<em>func</em> [optional]): You can provide your own implementation of <em>matchMedia</em> in a <a href="#server-side-rendering">server-side rendering context</a>.</li>\n</ul>\n<p>\u6ce8\u610f\uff1a\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e3b\u9898\u7684 <a href="/zh/material-ui/customization/theme-components/#default-props"><code>\u9ed8\u8ba4\u5c5e\u6027</code></a> \u529f\u80fd\u548c <code>MuiUseMediaQuery</code> \u952e\uff08key\uff09\u6765\u66f4\u6539\u9ed8\u8ba4\u7684\u9009\u9879\u3002</p>\n<h4>\u8fd4\u56de\u7ed3\u679c</h4><p><code>matches</code>\uff1a\u5982\u679c\u6587\u6863\u5f53\u524d\u80fd\u591f\u5339\u914d\u8fd9\u4e2a\u5a92\u4f53\u67e5\u8be2\uff0cMatches \u5219\u4e3a <code>true</code> \uff0c\u5426\u5219\u4e3a <code>false</code> \u3002</p>\n<h4>\u4f8b\u5b50</h4><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> useMediaQuery <span class="token keyword">from</span> <span class="token string">\'@material-ui/core/useMediaQuery\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SimpleMediaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token function">useMediaQuery</span><span class="token punctuation">(</span><span class="token string">\'(min-width:600px)\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(min-width:600px) matches: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>matches<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n'],toc:[{text:"\u7b80\u5355\u7684\u5a92\u4f53\u67e5\u8be2",level:2,hash:"basic-media-query",children:[]},{text:"\u4f7f\u7528 Material UI \u7684\u65ad\u70b9\u8f85\u52a9\u529f\u80fd",level:2,hash:"using-muis-breakpoint-helpers",children:[]},{text:"\u4f7f\u7528 JavaScript \u7684\u8bed\u6cd5",level:2,hash:"using-javascript-syntax",children:[]},{text:"\u6d4b\u8bd5",level:2,hash:"testing",children:[]},{text:"\u4ec5\u5728\u5ba2\u6237\u7aef\u6e32\u67d3",level:2,hash:"client-side-only-rendering",children:[]},{text:"\u670d\u52a1\u7aef\u6e32\u67d3",level:2,hash:"server-side-rendering",children:[]},{text:"\u4ece withWidth(&#8203;) \u8fc1\u79fb",level:2,hash:"migrating-from-withwidth",children:[]},{text:"API",level:2,hash:"api",children:[{text:"useMediaQuery(&#8203;query, [options]) =&gt; matches",level:3,hash:"usemediaquery-query-options-matches"}]}],title:"\u7528\u4e8e\u54cd\u5e94\u5f0f\u8bbe\u8ba1\u7684 React \u4e2d\u7684\u5a92\u4f53\u67e5\u8be2",headers:{product:"material-ui",title:"\u7528\u4e8e\u54cd\u5e94\u5f0f\u8bbe\u8ba1\u7684 React \u4e2d\u7684\u5a92\u4f53\u67e5\u8be2",githubLabel:"hook: useMediaQuery",components:[]}}},x={"SimpleMediaQuery.js":{module:"./SimpleMediaQuery.js",raw:"import * as React from 'react';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('(min-width:600px)');\n\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\n}\n",jsxPreview:"<span>{`(min-width:600px) matches: ${matches}`}</span>",moduleTS:"./SimpleMediaQuery.js",rawTS:"import * as React from 'react';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nexport default function SimpleMediaQuery() {\n  const matches = useMediaQuery('(min-width:600px)');\n\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\n}\n"},"ThemeHelper.js":{module:"./ThemeHelper.js",raw:"import * as React from 'react';\nimport { createTheme, ThemeProvider, useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n\nconst theme = createTheme();\n\nexport default function ThemeHelper() {\n  return (\n    <ThemeProvider theme={theme}>\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n",jsxPreview:"<ThemeProvider theme={theme}>\n  <MyComponent />\n</ThemeProvider>",moduleTS:"./ThemeHelper.js",rawTS:"import * as React from 'react';\nimport { createTheme, ThemeProvider, useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nfunction MyComponent() {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\n}\n\nconst theme = createTheme();\n\nexport default function ThemeHelper() {\n  return (\n    <ThemeProvider theme={theme}>\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n"},"JavaScriptMedia.js":{module:"./JavaScriptMedia.js",raw:"import * as React from 'react';\nimport json2mq from 'json2mq';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nexport default function JavaScriptMedia() {\n  const matches = useMediaQuery(\n    json2mq({\n      minWidth: 600,\n    }),\n  );\n\n  return <span>{`{ minWidth: 600 } matches: ${matches}`}</span>;\n}\n",jsxPreview:"<span>{`{ minWidth: 600 } matches: ${matches}`}</span>",moduleTS:"./JavaScriptMedia.js",rawTS:"import * as React from 'react';\nimport json2mq from 'json2mq';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nexport default function JavaScriptMedia() {\n  const matches = useMediaQuery(\n    json2mq({\n      minWidth: 600,\n    }),\n  );\n\n  return <span>{`{ minWidth: 600 } matches: ${matches}`}</span>;\n}\n"},"ServerSide.js":{module:"./ServerSide.js",raw:"import * as React from 'react';\nimport mediaQuery from 'css-mediaquery';\nimport { ThemeProvider } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nfunction MyComponent() {\n  const matches = useMediaQuery('(min-width:600px)');\n\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\n}\n\nexport default function ServerSide() {\n  const ssrMatchMedia = (query) => ({\n    matches: mediaQuery.match(query, {\n      // The estimated CSS width of the browser.\n      width: 800,\n    }),\n  });\n\n  return (\n    <ThemeProvider\n      theme={{\n        components: {\n          MuiUseMediaQuery: {\n            // Change the default options of useMediaQuery\n            defaultProps: { ssrMatchMedia },\n          },\n        },\n      }}\n    >\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n",jsxPreview:"<ThemeProvider<Theme>\n  theme={{\n    components: {\n      MuiUseMediaQuery: {\n        // Change the default options of useMediaQuery\n        defaultProps: { ssrMatchMedia },\n      },\n    },\n  }}\n>\n  <MyComponent />\n</ThemeProvider>",moduleTS:"./ServerSide.js",rawTS:"import * as React from 'react';\nimport mediaQuery from 'css-mediaquery';\nimport { ThemeProvider, Theme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nfunction MyComponent() {\n  const matches = useMediaQuery('(min-width:600px)');\n\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\n}\n\nexport default function ServerSide() {\n  const ssrMatchMedia = (query: string) => ({\n    matches: mediaQuery.match(query, {\n      // The estimated CSS width of the browser.\n      width: 800,\n    }),\n  });\n\n  return (\n    <ThemeProvider<Theme>\n      theme={{\n        components: {\n          MuiUseMediaQuery: {\n            // Change the default options of useMediaQuery\n            defaultProps: { ssrMatchMedia },\n          },\n        },\n      }}\n    >\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n"},"UseWidth.js":{module:"./UseWidth.js",raw:"import * as React from 'react';\nimport { ThemeProvider, useTheme, createTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\n/**\n * Be careful using this hook. It only works because the number of\n * breakpoints in theme is static. It will break once you change the number of\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\n */\nfunction useWidth() {\n  const theme = useTheme();\n  const keys = [...theme.breakpoints.keys].reverse();\n  return (\n    keys.reduce((output, key) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key));\n      return !output && matches ? key : output;\n    }, null) || 'xs'\n  );\n}\n\nfunction MyComponent() {\n  const width = useWidth();\n  return <span>{`width: ${width}`}</span>;\n}\n\nconst theme = createTheme();\n\nexport default function UseWidth() {\n  return (\n    <ThemeProvider theme={theme}>\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n",jsxPreview:"<ThemeProvider theme={theme}>\n  <MyComponent />\n</ThemeProvider>",moduleTS:"./UseWidth.js",rawTS:"import * as React from 'react';\nimport {\n  Breakpoint,\n  Theme,\n  ThemeProvider,\n  useTheme,\n  createTheme,\n} from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\ntype BreakpointOrNull = Breakpoint | null;\n\n/**\n * Be careful using this hook. It only works because the number of\n * breakpoints in theme is static. It will break once you change the number of\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\n */\nfunction useWidth() {\n  const theme: Theme = useTheme();\n  const keys: readonly Breakpoint[] = [...theme.breakpoints.keys].reverse();\n  return (\n    keys.reduce((output: BreakpointOrNull, key: Breakpoint) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key));\n      return !output && matches ? key : output;\n    }, null) || 'xs'\n  );\n}\n\nfunction MyComponent() {\n  const width = useWidth();\n  return <span>{`width: ${width}`}</span>;\n}\n\nconst theme = createTheme();\n\nexport default function UseWidth() {\n  return (\n    <ThemeProvider theme={theme}>\n      <MyComponent />\n    </ThemeProvider>\n  );\n}\n"}},q={"./SimpleMediaQuery.js":function(){var n=(0,t.Z)("(min-width:600px)");return(0,p.jsx)("span",{children:"(min-width:600px) matches: ".concat(n)})},"./ThemeHelper.js":function(){return o||(o=(0,p.jsx)(r.Z,{theme:l,children:(0,p.jsx)(u,{})}))},"./JavaScriptMedia.js":function(){var n=(0,t.Z)(d()({minWidth:600}));return(0,p.jsx)("span",{children:"{ minWidth: 600 } matches: ".concat(n)})},"./ServerSide.js":function(){return(0,p.jsx)(r.Z,{theme:{components:{MuiUseMediaQuery:{defaultProps:{ssrMatchMedia:function(n){return{matches:h.match(n,{width:800})}}}}}},children:m||(m=(0,p.jsx)(y,{}))})},"./UseWidth.js":function(){return g||(g=(0,p.jsx)(r.Z,{theme:w,children:(0,p.jsx)(v,{})}))}};function S(){return b||(b=(0,p.jsx)(e.Z,{demos:x,docs:M,demoComponents:q}))}},43266:function(n,a,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/react-use-media-query",function(){return s(980323)}])},231533:function(n){n.exports=function(n){return n.replace(/[A-Z]/g,(function(n){return"-"+n.toLowerCase()})).toLowerCase()}}},function(n){n.O(0,[64631,31194,72773,31659,16950,37141,91895,63463,61980,45387,892,2798,30170,20365,60630,25747,18049,26035,85244,67414,90478,30016,94616,49774,92888,40179],(function(){return a=43266,n(n.s=a);var a}));var a=n.O();_N_E=a}]);