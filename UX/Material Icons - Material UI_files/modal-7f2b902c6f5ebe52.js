(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[14790],{92191:function(e,o,t){var n={"./modal-pt.json":202412,"./modal-zh.json":181545,"./modal.json":647554,"docs/translations/api-docs/modal/modal-pt.json":202412,"docs/translations/api-docs/modal/modal-zh.json":181545,"docs/translations/api-docs/modal/modal.json":647554};function a(e){var o=s(e);return t(o)}function s(e){if(!t.o(n,e)){var o=new Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}return n[e]}a.keys=function(){return Object.keys(n)},a.resolve=s,e.exports=a,a.id=92191},924612:function(e,o,t){"use strict";t.r(o),t.d(o,{default:function(){return i}});t(827378);var n=t(888233),a=t(631506),s=JSON.parse('{"props":{"children":{"type":{"name":"custom","description":"element"},"required":true},"open":{"type":{"name":"bool"},"required":true},"BackdropComponent":{"type":{"name":"elementType"},"default":"styled(Backdrop, {\\n  name: \'MuiModal\',\\n  slot: \'Backdrop\',\\n  overridesResolver: (props, styles) => {\\n    return styles.backdrop;\\n  },\\n})({\\n  zIndex: -1,\\n})"},"BackdropProps":{"type":{"name":"object"}},"classes":{"type":{"name":"object"}},"closeAfterTransition":{"type":{"name":"bool"}},"component":{"type":{"name":"elementType"}},"components":{"type":{"name":"shape","description":"{ Root?: elementType }"},"default":"{}"},"componentsProps":{"type":{"name":"shape","description":"{ root?: object }"},"default":"{}"},"container":{"type":{"name":"union","description":"HTML element<br>&#124;&nbsp;func"}},"disableAutoFocus":{"type":{"name":"bool"}},"disableEnforceFocus":{"type":{"name":"bool"}},"disableEscapeKeyDown":{"type":{"name":"bool"}},"disablePortal":{"type":{"name":"bool"}},"disableRestoreFocus":{"type":{"name":"bool"}},"disableScrollLock":{"type":{"name":"bool"}},"hideBackdrop":{"type":{"name":"bool"}},"keepMounted":{"type":{"name":"bool"}},"onBackdropClick":{"type":{"name":"func"},"deprecated":true,"deprecationInfo":"Use the <code>onClose</code> prop with the <code>reason</code> argument to handle the <code>backdropClick</code> events."},"onClose":{"type":{"name":"func"}},"sx":{"type":{"name":"union","description":"Array&lt;func<br>&#124;&nbsp;object<br>&#124;&nbsp;bool&gt;<br>&#124;&nbsp;func<br>&#124;&nbsp;object"}}},"name":"Modal","styles":{"classes":["root","hidden"],"globalClasses":{},"name":"MuiModal"},"spread":true,"forwardsRefTo":"HTMLDivElement","filename":"/packages/mui-material/src/Modal/Modal.js","inheritance":null,"demos":"<ul><li><a href=\\"/material-ui/react-modal/\\">Modal</a></li></ul>","cssComponent":false}'),r=t(824246);function i(e){var o=e.descriptions,t=e.pageContent;return(0,r.jsx)(n.Z,{descriptions:o,pageContent:t})}i.getInitialProps=function(){var e=t(92191);return{descriptions:(0,a.Z)(e),pageContent:s}}},639015:function(e,o,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/api/modal",function(){return t(924612)}])},202412:function(e){"use strict";e.exports=JSON.parse('{"componentDescription":"Modal is a lower-level construct that is leveraged by the following components:\\n\\n- [Dialog](/material-ui/api/dialog/)\\n- [Drawer](/material-ui/api/drawer/)\\n- [Menu](/material-ui/api/menu/)\\n- [Popover](/material-ui/api/popover/)\\n\\nIf you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component\\nrather than directly using Modal.\\n\\nThis component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).","propDescriptions":{"BackdropComponent":"A backdrop component. This prop enables custom backdrop rendering.","BackdropProps":"Props applied to the <a href=\\"/material-ui/api/backdrop/\\"><code>Backdrop</code></a> element.","children":"A single child content element.<br>\u26a0\ufe0f <a href=\\"/material-ui/guides/composition/#caveat-with-refs\\">Needs to be able to hold a ref</a>.","classes":"Sobrescreve ou extende os estilos aplicados para o componente. Veja a <a href=\\"#css\\">API CSS</a> abaixo para maiores detalhes.","closeAfterTransition":"When set to true the Modal waits until a nested Transition is completed before closing.","components":"The components used for each slot inside the Modal. Either a string to use a HTML element or a component.","componentsProps":"The props used for each slot inside the Modal.","container":"A HTML element or function that returns one. The <code>container</code> will have the portal children appended to it.<br>By default, it uses the body of the top-level document object, so it&#39;s simply <code>document.body</code> most of the time.","disableAutoFocus":"If <code>true</code>, the modal will not automatically shift focus to itself when it opens, and replace it to the last focused element when it closes. This also works correctly with any modal children that have the <code>disableAutoFocus</code> prop.<br>Generally this should never be set to <code>true</code> as it makes the modal less accessible to assistive technologies, like screen readers.","disableEnforceFocus":"If <code>true</code>, the modal will not prevent focus from leaving the modal while open.<br>Generally this should never be set to <code>true</code> as it makes the modal less accessible to assistive technologies, like screen readers.","disableEscapeKeyDown":"If <code>true</code>, hitting escape will not fire the <code>onClose</code> callback.","disablePortal":"The <code>children</code> will be inside the DOM hierarchy of the parent component.","disableRestoreFocus":"If <code>true</code>, the modal will not restore focus to previously focused element once modal is hidden or unmounted.","disableScrollLock":"Disable the scroll lock behavior.","hideBackdrop":"If <code>true</code>, the backdrop is not rendered.","keepMounted":"Always keep the children in the DOM. This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Modal.","onBackdropClick":"Callback fired when the backdrop is clicked.","onClose":"Callback fired when the component requests to be closed. The <code>reason</code> parameter can optionally be used to control the response to <code>onClose</code>.<br><br><strong>Signature:</strong><br><code>function(event: object, reason: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>reason:</em> Can be: <code>&quot;escapeKeyDown&quot;</code>, <code>&quot;backdropClick&quot;</code>.","open":"Control the popup` open state.","sx":"The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\\"/system/basics/#the-sx-prop\\">`sx` page</a> for more details.","component":"The component used for the root node. Either a string to use a HTML element or a component."},"classDescriptions":{"root":{"description":"Estilos aplicados ao elemento raiz."},"hidden":{"description":"Estilos aplicados para {{nodeName}} se {{conditions}}.","nodeName":"o elemento raiz","conditions":"the <code>Modal</code> has exited"}}}')},181545:function(e){"use strict";e.exports=JSON.parse('{"componentDescription":"Modal is a lower-level construct that is leveraged by the following components:\\n\\n- [Dialog](/material-ui/api/dialog/)\\n- [Drawer](/material-ui/api/drawer/)\\n- [Menu](/material-ui/api/menu/)\\n- [Popover](/material-ui/api/popover/)\\n\\nIf you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component\\nrather than directly using Modal.\\n\\nThis component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).","propDescriptions":{"BackdropComponent":"A backdrop component. This prop enables custom backdrop rendering.","BackdropProps":"Props applied to the <a href=\\"/material-ui/api/backdrop/\\"><code>Backdrop</code></a> element.","children":"A single child content element.<br>\u26a0\ufe0f <a href=\\"/material-ui/guides/composition/#caveat-with-refs\\">Needs to be able to hold a ref</a>.","classes":"Override or extend the styles applied to the component. See <a href=\\"#css\\">CSS API</a> below for more details.","closeAfterTransition":"When set to true the Modal waits until a nested Transition is completed before closing.","components":"The components used for each slot inside the Modal. Either a string to use a HTML element or a component.","componentsProps":"The props used for each slot inside the Modal.","container":"A HTML element or function that returns one. The <code>container</code> will have the portal children appended to it.<br>By default, it uses the body of the top-level document object, so it&#39;s simply <code>document.body</code> most of the time.","disableAutoFocus":"If <code>true</code>, the modal will not automatically shift focus to itself when it opens, and replace it to the last focused element when it closes. This also works correctly with any modal children that have the <code>disableAutoFocus</code> prop.<br>Generally this should never be set to <code>true</code> as it makes the modal less accessible to assistive technologies, like screen readers.","disableEnforceFocus":"If <code>true</code>, the modal will not prevent focus from leaving the modal while open.<br>Generally this should never be set to <code>true</code> as it makes the modal less accessible to assistive technologies, like screen readers.","disableEscapeKeyDown":"If <code>true</code>, hitting escape will not fire the <code>onClose</code> callback.","disablePortal":"The <code>children</code> will be inside the DOM hierarchy of the parent component.","disableRestoreFocus":"If <code>true</code>, the modal will not restore focus to previously focused element once modal is hidden or unmounted.","disableScrollLock":"Disable the scroll lock behavior.","hideBackdrop":"If <code>true</code>, the backdrop is not rendered.","keepMounted":"Always keep the children in the DOM. This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Modal.","onBackdropClick":"Callback fired when the backdrop is clicked.","onClose":"Callback fired when the component requests to be closed. The <code>reason</code> parameter can optionally be used to control the response to <code>onClose</code>.<br><br><strong>Signature:</strong><br><code>function(event: object, reason: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>reason:</em> Can be: <code>&quot;escapeKeyDown&quot;</code>, <code>&quot;backdropClick&quot;</code>.","open":"Control the popup` open state.","sx":"The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\\"/system/basics/#the-sx-prop\\">`sx` page</a> for more details.","component":"The component used for the root node. Either a string to use a HTML element or a component."},"classDescriptions":{"root":{"description":"Styles applied to the root element."},"hidden":{"description":"Styles applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"the <code>Modal</code> has exited"}}}')},647554:function(e){"use strict";e.exports=JSON.parse('{"componentDescription":"Modal is a lower-level construct that is leveraged by the following components:\\n\\n- [Dialog](/material-ui/api/dialog/)\\n- [Drawer](/material-ui/api/drawer/)\\n- [Menu](/material-ui/api/menu/)\\n- [Popover](/material-ui/api/popover/)\\n\\nIf you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component\\nrather than directly using Modal.\\n\\nThis component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).","propDescriptions":{"BackdropComponent":"A backdrop component. This prop enables custom backdrop rendering.","BackdropProps":"Props applied to the <a href=\\"/material-ui/api/backdrop/\\"><code>Backdrop</code></a> element.","children":"A single child content element.<br>\u26a0\ufe0f <a href=\\"/material-ui/guides/composition/#caveat-with-refs\\">Needs to be able to hold a ref</a>.","classes":"Override or extend the styles applied to the component. See <a href=\\"#css\\">CSS API</a> below for more details.","closeAfterTransition":"When set to true the Modal waits until a nested Transition is completed before closing.","components":"The components used for each slot inside the Modal. Either a string to use a HTML element or a component.","componentsProps":"The props used for each slot inside the Modal.","container":"An HTML element or function that returns one. The <code>container</code> will have the portal children appended to it.<br>By default, it uses the body of the top-level document object, so it&#39;s simply <code>document.body</code> most of the time.","disableAutoFocus":"If <code>true</code>, the modal will not automatically shift focus to itself when it opens, and replace it to the last focused element when it closes. This also works correctly with any modal children that have the <code>disableAutoFocus</code> prop.<br>Generally this should never be set to <code>true</code> as it makes the modal less accessible to assistive technologies, like screen readers.","disableEnforceFocus":"If <code>true</code>, the modal will not prevent focus from leaving the modal while open.<br>Generally this should never be set to <code>true</code> as it makes the modal less accessible to assistive technologies, like screen readers.","disableEscapeKeyDown":"If <code>true</code>, hitting escape will not fire the <code>onClose</code> callback.","disablePortal":"The <code>children</code> will be under the DOM hierarchy of the parent component.","disableRestoreFocus":"If <code>true</code>, the modal will not restore focus to previously focused element once modal is hidden or unmounted.","disableScrollLock":"Disable the scroll lock behavior.","hideBackdrop":"If <code>true</code>, the backdrop is not rendered.","keepMounted":"Always keep the children in the DOM. This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Modal.","onBackdropClick":"Callback fired when the backdrop is clicked.","onClose":"Callback fired when the component requests to be closed. The <code>reason</code> parameter can optionally be used to control the response to <code>onClose</code>.<br><br><strong>Signature:</strong><br><code>function(event: object, reason: string) =&gt; void</code><br><em>event:</em> The event source of the callback.<br><em>reason:</em> Can be: <code>&quot;escapeKeyDown&quot;</code>, <code>&quot;backdropClick&quot;</code>.","open":"If <code>true</code>, the component is shown.","sx":"The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\\"/system/the-sx-prop/\\">`sx` page</a> for more details.","component":"The component used for the root node. Either a string to use a HTML element or a component."},"classDescriptions":{"root":{"description":"Styles applied to the root element."},"hidden":{"description":"Styles applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"the <code>Modal</code> has exited"}}}')}},function(e){e.O(0,[64631,31194,72773,31659,16950,37141,59771,63463,61980,45387,892,2798,30170,20365,60630,25747,18049,26035,85244,67414,90478,30016,53384,49774,92888,40179],(function(){return o=639015,e(e.s=o);var o}));var o=e.O();_N_E=o}]);